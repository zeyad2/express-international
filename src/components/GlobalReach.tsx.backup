import React, { useState } from 'react';
import { Globe, MapPin, Plane, Ship } from 'lucide-react';
import { motion } from 'framer-motion';
import { useLanguage } from '../contexts/LanguageContext';

interface GlobalReachProps {
  visibleElements: Set<string>;
}

// Enhanced airplane component with proper animation
const AnimatedAirplane: React.FC<{ 
  path: string; 
  duration: number; 
  delay: number;
  direction?: number;
}> = ({ path, duration, delay, direction = 0 }) => {
  return (
    <motion.g
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ delay, duration: 0.5 }}
    >
      <motion.g
        animate={{
          offsetDistance: ["0%", "100%"]
        }}
        transition={{
          duration,
          delay,
          repeat: Infinity,
          ease: "linear",
          repeatDelay: 2
        }}
        style={{
          offsetPath: `path('${path}')`,
          transformOrigin: 'center'
        }}
      >
        <g transform={`rotate(${direction})`}>
          <circle 
            r="6" 
            fill="url(#airplaneGradient)" 
            filter="url(#vehicleGlow)"
            stroke="white"
            strokeWidth="1"
          />
          <foreignObject x="-6" y="-6" width="12" height="12">
            <div className="w-3 h-3 flex items-center justify-center">
              <Plane className="w-2 h-2 text-white" />
            </div>
          </foreignObject>
        </g>
      </motion.g>
    </motion.g>
  );
};

// Enhanced cargo ship component with proper animation
const AnimatedShip: React.FC<{ 
  path: string; 
  duration: number; 
  delay: number;
  direction?: number;
}> = ({ path, duration, delay, direction = 0 }) => {
  return (
    <motion.g
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ delay, duration: 0.5 }}
    >
      <motion.g
        animate={{
          offsetDistance: ["0%", "100%"]
        }}
        transition={{
          duration,
          delay,
          repeat: Infinity,
          ease: "linear",
          repeatDelay: 3
        }}
        style={{
          offsetPath: `path('${path}')`,
          transformOrigin: 'center'
        }}
      >
        <g transform={`rotate(${direction})`}>
          <circle 
            r="6" 
            fill="url(#shipGradient)" 
            filter="url(#vehicleGlow)"
            stroke="white"
            strokeWidth="1"
          />
          <foreignObject x="-6" y="-6" width="12" height="12">
            <div className="w-3 h-3 flex items-center justify-center">
              <Ship className="w-2 h-2 text-white" />
            </div>
          </foreignObject>
        </g>
      </motion.g>
    </motion.g>
  );
};

const GlobalReach: React.FC<GlobalReachProps> = ({ visibleElements }) => {
  const [hoveredLocation, setHoveredLocation] = useState<string | null>(null);
  const { t, isRTL } = useLanguage();

  // Enhanced trade locations with accurate coordinates
  const locations = [
    { name: 'Shanghai', country: 'China', x: 780, y: 170, type: 'major' },
    { name: 'Shenzhen', country: 'China', x: 770, y: 190, type: 'major' },
    { name: 'Mumbai', country: 'India', x: 650, y: 220, type: 'major' },
    { name: 'Chennai', country: 'India', x: 680, y: 240, type: 'major' },
    { name: 'Dubai', country: 'UAE', x: 590, y: 200, type: 'major' },
    { name: 'Doha', country: 'Qatar', x: 575, y: 205, type: 'major' },
    { name: 'Riyadh', country: 'Saudi Arabia', x: 555, y: 215, type: 'major' },
    { name: 'Cairo', country: 'Egypt', x: 490, y: 230, type: 'major' },
    { name: 'Singapore', country: 'Singapore', x: 730, y: 270, type: 'major' },
    { name: 'Hong Kong', country: 'Hong Kong', x: 765, y: 200, type: 'major' },
  ];

  // Realistic air freight routes with proper curved paths
  const airRoutes = [
    { 
      name: "Shanghai → Dubai",
      path: "M780,170 Q720,130 650,140 Q620,150 590,200", 
      duration: 6,
      direction: -15
    },
    { 
      name: "Mumbai → Doha",
      path: "M650,220 Q615,210 575,205", 
      duration: 4,
      direction: -10
    },
    { 
      name: "Shenzhen → Riyadh",
      path: "M770,190 Q680,160 600,180 Q580,190 555,215", 
      duration: 7,
      direction: -20
    },
    { 
      name: "Singapore → Cairo",
      path: "M730,270 Q650,250 580,240 Q540,235 490,230", 
      duration: 8,
      direction: -25
    },
    { 
      name: "Hong Kong → Dubai",
      path: "M765,200 Q680,170 630,180 Q610,190 590,200", 
      duration: 6,
      direction: -15
    },
  ];

  // Realistic sea freight routes including Suez Canal
  const seaRoutes = [
    { 
      name: "Shanghai → Dubai (via Strait of Malacca)",
      path: "M780,170 Q750,200 730,270 Q700,280 650,270 Q620,260 600,240 Q590,220 590,200", 
      duration: 18,
      direction: 0
    },
    { 
      name: "Mumbai → Dubai (Persian Gulf)",
      path: "M650,220 Q620,210 590,200", 
      duration: 12,
      direction: -10
    },
    { 
      name: "East Asia → Mediterranean (via Suez)",
      path: "M730,270 Q700,280 650,270 Q600,260 580,250 Q520,240 490,230 Q460,225 430,220", 
      duration: 22,
      direction: -5
    },
    { 
      name: "Singapore → Red Sea",
      path: "M730,270 Q680,260 630,250 Q600,245 580,240 Q560,235 540,232", 
      duration: 16,
      direction: -8
    },
  ];

  return (
    <section id="global-reach" className="py-20 bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-100">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div 
          id="global-title"
          data-animate
          className={`text-center mb-16 transition-all duration-1000 ${
            visibleElements.has('global-title') 
              ? 'opacity-100 translate-y-0' 
              : 'opacity-0 translate-y-8'
          }`}
        >
          <div className="flex justify-center mb-6">
            <div className="relative">
              <Globe className="w-16 h-16 text-blue-600 animate-spin" style={{ animationDuration: '20s' }} />
              <div className="absolute inset-0 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full opacity-20 animate-pulse"></div>
            </div>
          </div>
          <h2 className="text-5xl font-bold bg-gradient-to-r from-blue-900 via-purple-700 to-blue-900 bg-clip-text text-transparent mb-6">
            {t('global.title')}
          </h2>
          <p className={`text-xl text-gray-700 max-w-3xl mx-auto leading-relaxed ${isRTL ? 'text-right' : 'text-left'}`}>
            {t('global.subtitle')}
          </p>
        </div>

        {/* Enhanced Interactive World Map */}
        <div 
          id="world-map"
          data-animate
          className={`relative bg-gradient-to-br from-slate-100 to-blue-50 rounded-3xl shadow-2xl border border-white/30 mb-12 overflow-hidden transition-all duration-1000 ${
            visibleElements.has('world-map') 
              ? 'opacity-100 translate-y-0' 
              : 'opacity-0 translate-y-8'
          }`}
        >
          <div className="absolute inset-0 bg-gradient-to-br from-blue-50/50 to-indigo-100/30 pointer-events-none"></div>
          <svg 
            viewBox="0 0 1000 500" 
            className="w-full h-96 md:h-[500px] relative z-10"
            style={{ 
              background: 'radial-gradient(ellipse at center, #f0f9ff 0%, #e0f2fe 50%, #bae6fd 100%)'
            }}
          >
            {/* Enhanced gradient definitions */}
            <defs>
              <linearGradient id="asiaGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#065f46" />
                <stop offset="50%" stopColor="#059669" />
                <stop offset="100%" stopColor="#34d399" />
              </linearGradient>
              <linearGradient id="middleEastGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#92400e" />
                <stop offset="50%" stopColor="#d97706" />
                <stop offset="100%" stopColor="#fbbf24" />
              </linearGradient>
              <linearGradient id="africaGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#991b1b" />
                <stop offset="50%" stopColor="#dc2626" />
                <stop offset="100%" stopColor="#f87171" />
              </linearGradient>
              <linearGradient id="europeGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#581c87" />
                <stop offset="50%" stopColor="#7c3aed" />
                <stop offset="100%" stopColor="#a78bfa" />
              </linearGradient>
              <linearGradient id="americaGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#0c4a6e" />
                <stop offset="50%" stopColor="#0284c7" />
                <stop offset="100%" stopColor="#38bdf8" />
              </linearGradient>
              <filter id="continentShadow">
                <feDropShadow dx="2" dy="4" stdDeviation="3" floodColor="rgba(0,0,0,0.15)"/>
              </filter>
            </defs>

            {/* Enhanced continent shapes with better accuracy */}
            {/* Asia - more detailed and realistic */}
            <motion.path
              d="M580,140 Q590,135 610,140 L650,145 Q680,150 720,155 Q760,150 800,160 Q840,170 870,190 Q890,210 900,240 Q895,270 880,300 Q860,330 830,350 Q800,365 760,370 Q720,365 690,350 Q660,330 640,300 Q620,270 610,240 Q600,210 590,180 Q585,160 580,140 Z"
              fill="url(#asiaGradient)"
              filter="url(#continentShadow)"
              className="transition-all duration-300 hover:brightness-110"
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ pathLength: 1, opacity: 1 }}
              transition={{ duration: 2, delay: 0.5 }}
            />
            
            {/* Middle East - enhanced shape */}
            <motion.path
              d="M480,190 Q520,185 560,190 Q580,195 590,210 Q595,230 590,250 Q585,270 575,285 Q560,300 540,305 Q520,300 500,290 Q485,275 480,255 Q478,235 480,215 Q482,195 480,190 Z"
              fill="url(#middleEastGradient)"
              filter="url(#continentShadow)"
              className="transition-all duration-300 hover:brightness-110"
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ pathLength: 1, opacity: 1 }}
              transition={{ duration: 2, delay: 0.8 }}
            />
            
            {/* Africa - more detailed northern coast */}
            <motion.path
              d="M430,210 Q460,205 480,210 Q500,215 515,230 Q525,250 530,275 Q535,300 530,325 Q525,350 515,375 Q505,400 490,420 Q475,435 455,445 Q435,450 415,445 Q395,435 380,415 Q370,395 365,370 Q362,345 365,320 Q370,295 380,275 Q395,255 415,240 Q430,225 430,210 Z"
              fill="url(#africaGradient)"
              filter="url(#continentShadow)"
              className="transition-all duration-300 hover:brightness-110"
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ pathLength: 1, opacity: 1 }}
              transition={{ duration: 2, delay: 1.1 }}
            />
            
            {/* Europe - enhanced Mediterranean region */}
            <motion.path
              d="M400,130 Q440,125 480,135 Q520,145 540,165 Q550,185 545,205 Q535,220 520,225 Q500,230 480,225 Q460,220 440,210 Q420,195 410,175 Q405,155 405,135 Q402,125 400,130 Z"
              fill="url(#europeGradient)"
              filter="url(#continentShadow)"
              className="transition-all duration-300 hover:brightness-110"
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ pathLength: 1, opacity: 1 }}
              transition={{ duration: 2, delay: 1.4 }}
            />
            
            {/* North America */}
            <motion.path
              d="M80,110 Q150,105 220,115 Q280,125 320,150 Q350,175 360,205 Q365,235 350,260 Q330,280 300,290 Q270,295 240,290 Q210,285 180,275 Q150,260 125,240 Q100,220 85,195 Q80,170 80,145 Q82,125 80,110 Z"
              fill="url(#americaGradient)"
              filter="url(#continentShadow)"
              className="transition-all duration-300 hover:brightness-110"
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ pathLength: 1, opacity: 1 }}
              transition={{ duration: 2, delay: 1.7 }}
            />
            
            {/* South America */}
            <motion.path
              d="M220,290 Q260,285 290,300 Q315,320 330,345 Q340,370 345,395 Q350,420 340,445 Q330,465 315,475 Q295,480 275,475 Q255,465 240,445 Q230,425 225,400 Q222,375 225,350 Q230,325 240,305 Q228,295 220,290 Z"
              fill="url(#americaGradient)"
              filter="url(#continentShadow)"
              className="transition-all duration-300 hover:brightness-110"
              initial={{ pathLength: 0, opacity: 0 }}
              animate={{ pathLength: 1, opacity: 1 }}
              transition={{ duration: 2, delay: 2.0 }}
            />

              {/* Enhanced route gradients and filters */}
              <linearGradient id="airRouteGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stopColor="#3b82f6" stopOpacity="0" />
                <stop offset="30%" stopColor="#60a5fa" stopOpacity="0.6" />
                <stop offset="70%" stopColor="#3b82f6" stopOpacity="0.8" />
                <stop offset="100%" stopColor="#1d4ed8" stopOpacity="0" />
              </linearGradient>
              <linearGradient id="seaRouteGradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stopColor="#059669" stopOpacity="0" />
                <stop offset="30%" stopColor="#10b981" stopOpacity="0.6" />
                <stop offset="70%" stopColor="#047857" stopOpacity="0.8" />
                <stop offset="100%" stopColor="#065f46" stopOpacity="0" />
              </linearGradient>
              <filter id="routeGlow">
                <feGaussianBlur stdDeviation="3" result="coloredBlur"/>
                <feMerge> 
                  <feMergeNode in="coloredBlur"/>
                  <feMergeNode in="SourceGraphic"/>
                </feMerge>
              </filter>
              
              {/* Vehicle and pin gradient definitions */}
              <linearGradient id="airplaneGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#60a5fa" />
                <stop offset="50%" stopColor="#3b82f6" />
                <stop offset="100%" stopColor="#1d4ed8" />
              </linearGradient>
              <linearGradient id="shipGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#34d399" />
                <stop offset="50%" stopColor="#10b981" />
                <stop offset="100%" stopColor="#047857" />
              </linearGradient>
              <linearGradient id="pinGradient" x1="0%" y1="0%" x2="100%" y2="100%">
                <stop offset="0%" stopColor="#f87171" />
                <stop offset="50%" stopColor="#ef4444" />
                <stop offset="100%" stopColor="#dc2626" />
              </linearGradient>
              <filter id="vehicleGlow">
                <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
                <feMerge> 
                  <feMergeNode in="coloredBlur"/>
                  <feMergeNode in="SourceGraphic"/>
                </feMerge>
              </filter>
              <filter id="pinShadow">
                <feDropShadow dx="1" dy="2" stdDeviation="2" floodColor="rgba(0,0,0,0.3)"/>
              </filter>
              <filter id="tooltipShadow">
                <feDropShadow dx="0" dy="4" stdDeviation="8" floodColor="rgba(0,0,0,0.3)"/>
              </filter>
            </defs>

            {/* Enhanced air routes with multiple animations */}
            {airRoutes.map((route, index) => (
              <g key={`air-${index}`}>
                {/* Base route path */}
                <motion.path
                  d={route.path}
                  stroke="rgba(59, 130, 246, 0.2)"
                  strokeWidth="1"
                  fill="none"
                  strokeDasharray="4,8"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: [0, 0.5, 0] }}
                  transition={{
                    duration: 8,
                    delay: index * 0.8,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />
                {/* Glowing trail */}
                <motion.path
                  d={route.path}
                  stroke="url(#airRouteGradient)"
                  strokeWidth="2"
                  fill="none"
                  filter="url(#routeGlow)"
                  initial={{ pathLength: 0, opacity: 0 }}
                  animate={{ 
                    pathLength: [0, 0.3, 0], 
                    opacity: [0, 1, 0] 
                  }}
                  transition={{
                    duration: route.duration,
                    delay: index * 1.2,
                    repeat: Infinity,
                    ease: "easeOut"
                  }}
                />
                {/* Multiple airplanes per route */}
                {[0, 0.5].map((delayMultiplier) => (
                  <AnimatedAirplane 
                    key={`${index}-${delayMultiplier}`}
                    path={route.path} 
                    duration={route.duration} 
                    delay={index * 1.2 + delayMultiplier * route.duration}
                    direction={route.direction}
                  />
                ))}
              </g>
            ))}

            {/* Enhanced sea routes with realistic shipping lanes */}
            {seaRoutes.map((route, index) => (
              <g key={`sea-${index}`}>
                {/* Base shipping lane */}
                <motion.path
                  d={route.path}
                  stroke="rgba(5, 150, 105, 0.15)"
                  strokeWidth="3"
                  fill="none"
                  strokeDasharray="12,8"
                  initial={{ opacity: 0 }}
                  animate={{ opacity: [0, 0.3, 0] }}
                  transition={{
                    duration: 12,
                    delay: index * 1.5 + 3,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />
                {/* Wake trail */}
                <motion.path
                  d={route.path}
                  stroke="url(#seaRouteGradient)"
                  strokeWidth="4"
                  fill="none"
                  filter="url(#routeGlow)"
                  opacity="0.8"
                  initial={{ pathLength: 0, opacity: 0 }}
                  animate={{ 
                    pathLength: [0, 0.2, 0], 
                    opacity: [0, 0.8, 0] 
                  }}
                  transition={{
                    duration: route.duration,
                    delay: index * 2 + 4,
                    repeat: Infinity,
                    ease: "easeInOut"
                  }}
                />
                {/* Ships with proper spacing */}
                {[0, 0.6].map((delayMultiplier) => (
                  <AnimatedShip 
                    key={`${index}-${delayMultiplier}`}
                    path={route.path} 
                    duration={route.duration} 
                    delay={index * 2 + 4 + delayMultiplier * route.duration}
                    direction={route.direction}
                  />
                ))}
              </g>
            ))}

            {/* Modern location pins */}
            {locations.map((location, index) => (
              <g key={index}>
                {/* Pin shadow */}
                <motion.ellipse
                  cx={location.x}
                  cy={location.y + 3}
                  rx="8"
                  ry="3"
                  fill="rgba(0,0,0,0.1)"
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  transition={{ delay: index * 0.15 + 2.5, duration: 0.6 }}
                />
                
                {/* Main pin */}
                <motion.g
                  style={{ cursor: 'pointer' }}
                  initial={{ scale: 0, opacity: 0, y: -20 }}
                  animate={{ scale: 1, opacity: 1, y: 0 }}
                  transition={{ 
                    delay: index * 0.15 + 2.5, 
                    duration: 0.6,
                    type: "spring",
                    stiffness: 200
                  }}
                  whileHover={{ scale: 1.2, y: -2 }}
                  onMouseEnter={() => setHoveredLocation(location.name)}
                  onMouseLeave={() => setHoveredLocation(null)}
                >
                  {/* Pin body */}
                  <circle
                    cx={location.x}
                    cy={location.y}
                    r="8"
                    fill="url(#pinGradient)"
                    stroke="white"
                    strokeWidth="2"
                    filter="url(#pinShadow)"
                  />
                  
                  {/* Pin center dot */}
                  <circle
                    cx={location.x}
                    cy={location.y}
                    r="3"
                    fill="white"
                    opacity="0.9"
                  />
                  
                  {/* Pulse ring */}
                  <motion.circle
                    cx={location.x}
                    cy={location.y}
                    r="15"
                    fill="none"
                    stroke="rgba(239, 68, 68, 0.4)"
                    strokeWidth="2"
                    initial={{ scale: 0.5, opacity: 0 }}
                    animate={{ scale: [0.5, 1.8, 0.5], opacity: [0, 0.6, 0] }}
                    transition={{ 
                      delay: index * 0.15 + 3,
                      duration: 3,
                      repeat: Infinity,
                      ease: "easeOut"
                    }}
                  />
                </motion.g>
                
                {/* Enhanced tooltip */}
                {hoveredLocation === location.name && (
                  <motion.g
                    initial={{ opacity: 0, y: 15, scale: 0.8 }}
                    animate={{ opacity: 1, y: 0, scale: 1 }}
                    exit={{ opacity: 0, y: 15, scale: 0.8 }}
                    transition={{ duration: 0.2 }}
                  >
                    {/* Tooltip background */}
                    <rect
                      x={location.x - 40}
                      y={location.y - 50}
                      width="80"
                      height="32"
                      fill="rgba(15, 23, 42, 0.95)"
                      rx="8"
                      stroke="rgba(255,255,255,0.1)"
                      strokeWidth="1"
                      filter="url(#tooltipShadow)"
                    />
                    
                    {/* Tooltip arrow */}
                    <path
                      d={`M${location.x - 6},${location.y - 18} L${location.x + 6},${location.y - 18} L${location.x},${location.y - 12} Z`}
                      fill="rgba(15, 23, 42, 0.95)"
                    />
                    
                    {/* City name */}
                    <text
                      x={location.x}
                      y={location.y - 38}
                      textAnchor="middle"
                      fill="white"
                      fontSize="11"
                      fontWeight="600"
                      fontFamily="system-ui, -apple-system, sans-serif"
                    >
                      {location.name}
                    </text>
                    
                    {/* Country */}
                    <text
                      x={location.x}
                      y={location.y - 26}
                      textAnchor="middle"
                      fill="rgba(255,255,255,0.7)"
                      fontSize="9"
                      fontFamily="system-ui, -apple-system, sans-serif"
                    >
                      {location.country}
                    </text>
                  </motion.g>
                )}
              </g>
            ))}
            
          </svg>
        </div>
        
        {/* Stats Grid */}
        <div className={`grid grid-cols-1 md:grid-cols-4 gap-6 ${isRTL ? 'text-right' : 'text-left'}`}>
          {[
            { number: '50+', label: t('global.countries'), icon: Globe, color: 'from-blue-500 to-cyan-500' },
            { number: '200+', label: t('global.cities'), icon: MapPin, color: 'from-purple-500 to-pink-500' },
            { number: '24/7', label: t('global.operations'), icon: Plane, color: 'from-orange-500 to-red-500' },
            { number: '99.9%', label: t('global.reliability'), icon: Ship, color: 'from-green-500 to-emerald-500' },
          ].map((stat, index) => (
            <motion.div
              key={index}
              className="bg-white/80 backdrop-blur-sm rounded-xl p-8 text-center border border-white/20 shadow-lg hover:shadow-xl"
              initial={{ opacity: 0, y: 20 }}
              animate={visibleElements.has('global-title') ? { opacity: 1, y: 0 } : {}}
              transition={{ delay: 0.8 + index * 0.1, duration: 0.6 }}
              whileHover={{ scale: 1.05, y: -5 }}
            >
              <div className={`w-16 h-16 mx-auto mb-4 bg-gradient-to-r ${stat.color} rounded-full flex items-center justify-center shadow-lg`}>
                <stat.icon className="w-8 h-8 text-white" />
              </div>
              <div className="text-4xl font-bold text-gray-900 mb-2">{stat.number}</div>
              <div className="text-gray-600 font-medium">{stat.label}</div>
            </motion.div>
          ))}
        </div>
      </div>
    </section>
  );
};

export default GlobalReach;
